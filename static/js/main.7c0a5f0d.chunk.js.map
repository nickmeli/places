{"version":3,"sources":["components/models/Marker.ts","helpers/MarkerService.ts","helpers/MapsService.ts","components/containers/PlacesItem.tsx","components/containers/PlacesList.tsx","components/containers/Map.tsx","components/layouts/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MarkerObject","lat","lng","icon","title","infoWindowContent","photo","marker","infowindow","this","creaMarkerInfoWindow","body","MapsHelper","createGoogleMap","googleMapRef","currentLocation","window","google","maps","Map","current","zoom","center","disableDefaultUI","createDrawingManager","googleMap","drawingManager","drawing","DrawingManager","defaultDrawingMode","drawingMode","OverlayType","MARKER","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","markerOptions","circleOptions","fillColor","fillOpacity","strokeWeight","clickable","editable","zIndex","setMap","setListeners","callback","event","addListener","createMarker","markerObj","InfoWindow","content","Marker","map","createPlacesService","places","PlacesService","PlacesItem","className","style","marginBottom","src","props","Component","PlacesList","Markers","value","index","key","previusObjects","React","createRef","placesService","openedMarker","close","open","overlayComplete","type","overlay","radius","request","location","name","state","selected_type","push","keyword","setState","removeAllMarkers","temp_markers","nearbySearch","results","status","PlacesServiceStatus","OK","i","length","geometry","photos","getUrl","markers","console","log","selectChanged","target","inputChanged","keyDown","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","paddingLeft","textAlign","onChange","id","onKeyDown","ref","width","height","Home","ShowMarker","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c0a5f0d.chunk.js","sourcesContent":["export class MarkerObject {\n    lat: number = 0;\n    lng: number = 0;\n    icon: string = '';\n    title: string = '';\n    infoWindowContent: string = '';\n    photo: string = '';\n    marker: any;\n    infowindow: any = null;\n\n    constructor(lat: number, lng: number, icon: string, title: string, infoWindowContent: string, photo: string, marker: any) {\n        this.lat = lat;\n        this.lng = lng;\n        this.icon = icon;\n        this.title = title;\n        this.infoWindowContent = infoWindowContent;\n        this.photo = photo;\n        this.marker = marker;\n    }\n}","import { MarkerObject } from '../components/models/Marker';\n\nexport function creaMarkerInfoWindow(marker: MarkerObject) {\n    var body = `<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"` +\n                `integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">`\n\n    body += `<div class=\"card\" style=\"width: 18rem; border: 0px solid rgba(0,0,0,.125);\">`+\n            `<img src=\"${marker.photo}\" class=\"card-img-top\" alt=\"...\">`+\n            `<div class=\"card-body\">`+\n            `<h5 class=\"card-title\" style=\"color: #000;\">${marker.title}</h5>`+\n            `</div>`+\n            `</div>`;\n\n    return body;\n}","import { creaMarkerInfoWindow } from './MarkerService';\nimport { MarkerObject } from '../components/models/Marker';\n\nexport class MapsHelper {\n    public static createGoogleMap = (googleMapRef: any, currentLocation: any) => {\n        return new (window as any).google.maps.Map(googleMapRef.current, {\n            zoom: 12,\n            center: currentLocation,\n            disableDefaultUI: true,\n        });\n    }\n\n    public static createDrawingManager = (googleMap: any) => {\n        var drawingManager = new (window as any).google.maps.drawing.DrawingManager({\n            defaultDrawingMode: 'circle',\n            drawingMode: (window as any).google.maps.drawing.OverlayType.MARKER,\n            drawingControl: true,\n            drawingControlOptions: {\n                position: (window as any).google.maps.ControlPosition.TOP_CENTER,\n                drawingModes: ['circle']\n            },\n            markerOptions: { icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png' },\n            circleOptions: {\n                fillColor: '#000000',\n                fillOpacity: 0.05,\n                strokeWeight: 2,\n                clickable: false,\n                editable: true,\n                zIndex: 1\n            }\n        });\n        drawingManager.setMap(googleMap);\n\n        return drawingManager;\n    }\n\n    public static setListeners = (drawingManager: any, callback: any) => {\n        (window as any).google.maps.event.addListener(drawingManager, 'overlaycomplete', (event: any) => {\n            callback(event);\n        });\n    }\n\n    public static createMarker = (markerObj: MarkerObject, googleMap: any) => {\n        var infowindow = new (window as any).google.maps.InfoWindow({\n            content: creaMarkerInfoWindow(markerObj)\n        });\n        markerObj.infowindow = infowindow;\n\n        var marker = new (window as any).google.maps.Marker({\n            position: { lat: markerObj.lat, lng: markerObj.lng },\n            map: googleMap,\n            infowindow: infowindow\n            // icon: marker.icon\n        });\n\n        return marker;\n    }\n\n    public static createPlacesService: any = (googleMap: any) => {\n        return new (window as any).google.maps.places.PlacesService(googleMap);\n    }\n}","import React, { Component } from 'react';\nimport { MarkerObject } from '../models/Marker';\n\nexport interface Props {\n    Marker: MarkerObject;\n}\n\nexport class PlacesItem extends Component<Props, object> {\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <div className=\"card\" style={{marginBottom: '5px'}}>\n                        <img src={this.props.Marker.photo} className=\"card-img-top\" />\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{this.props.Marker.title}</h5>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { PlacesItem } from './PlacesItem';\nimport { MarkerObject } from '../models/Marker';\n\nexport interface Props {\n    Markers: MarkerObject[];\n}\n\nexport class PlacesList extends Component<Props, object> {\n    render () {\n        return (\n            <div className=\"places-list\">\n                {this.props.Markers.map((value, index) => {\n                    return <PlacesItem key={index} Marker={value} />\n                })}\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { MarkerObject } from '../models/Marker';\nimport { MapsHelper } from '../../helpers/MapsService';\nimport { PlacesList } from './PlacesList';\n\nexport interface Props {\n    ShowMarker: boolean\n}\n\nexport interface State {\n    markers: MarkerObject[],\n    center: any,\n    radius: number,\n    selected_type: string,\n    keyword: string\n}\n\nclass Map extends Component<Props, State> {\n    previusObjects: any = null;\n    googleMapRef: any = React.createRef();\n    googleMap: any;\n    drawingManager: any;\n    placesService: any;\n    // markers: MarkerObject[] = [];\n    currentLocation: any = {};\n    openedMarker: any = null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            markers: [],\n            center: null,\n            radius: 0,\n            selected_type: 'all',\n            keyword: ''\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ markers: [] });\n\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                this.currentLocation = {\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                };\n\n                this.googleMap = MapsHelper.createGoogleMap(this.googleMapRef, this.currentLocation);\n                this.drawingManager = MapsHelper.createDrawingManager(this.googleMap);\n                MapsHelper.setListeners(this.drawingManager, this.overlayComplete);\n                this.placesService = MapsHelper.createPlacesService(this.googleMap);\n            }, function () {\n\n            });\n        }\n    }\n\n    createPlacesService = () => {\n        this.placesService = new (window as any).google.maps.places.PlacesService(this.googleMap);\n    }\n\n    createMarker = (markerObj: MarkerObject) => {\n        var marker = MapsHelper.createMarker(markerObj, this.googleMap);\n\n        marker.addListener('click', () => {\n            if (this.openedMarker) {\n                this.openedMarker.infowindow.close(this.googleMap, this.openedMarker);\n            }\n            marker.infowindow.open(this.googleMap, marker);\n            this.openedMarker = marker;\n        });\n\n        return marker;\n    }\n\n    overlayComplete = (event: any) => {\n        if (this.previusObjects) {\n            this.previusObjects['overlay'].setMap(null);\n        }\n        this.previusObjects = event;\n        if (event.type == \"circle\") {\n            var center = { lat: event.overlay.center.lat(), lng: event.overlay.center.lng() };\n            var radius = event.overlay.radius;\n\n            var request = {\n                location: center,\n                radius: radius,\n                type: [],\n                name: ''\n            };\n            if (this.state.selected_type != 'all') {\n                request.type.push(this.state.selected_type as never);\n            }\n            if (this.state.keyword) {\n                request.name = this.state.keyword;\n            }\n            this.setState({ center: center, radius: radius });\n            this.removeAllMarkers();\n            var temp_markers: MarkerObject[] = [];\n            this.placesService.nearbySearch(request, (results: any, status: any) => {\n                if (status === (window as any).google.maps.places.PlacesServiceStatus.OK) {\n                    for (var i = 0; i < results.length; i++) {\n                        var marker = new MarkerObject(\n                            results[i].geometry.location.lat(),\n                            results[i].geometry.location.lng(),\n                            results[i].icon,\n                            results[i].name,\n                            '',\n                            results[i].photos && results[i].photos.length > 0 ? results[i].photos[0].getUrl() : '',\n                            null\n                        );\n                        marker.marker = this.createMarker(marker);\n                        temp_markers.push(marker);\n                    }\n                    this.setState({ markers: temp_markers });\n                    // map.setCenter(results[0].geometry.location);\n                }\n                else {\n                    console.log('Error: ', status);\n                }\n            });\n        }\n    }\n\n    removeAllMarkers = () => {\n        for (var marker of this.state.markers) {\n            marker.marker.setMap(null);\n        }\n    }\n\n    selectChanged = (event: any) => {\n        this.setState({ selected_type: event.target.value }, () => {\n            var request = {\n                location: this.state.center,\n                radius: this.state.radius,\n                type: [],\n                name: ''\n            };\n            if (this.state.selected_type != 'all') {\n                request.type.push(this.state.selected_type as never);\n            }\n            if (this.state.keyword) {\n                request.name = this.state.keyword;\n            }\n    \n            this.removeAllMarkers();\n            var temp_markers: MarkerObject[] = [];\n            this.placesService.nearbySearch(request, (results: any, status: any) => {\n                if (status === (window as any).google.maps.places.PlacesServiceStatus.OK) {\n                    for (var i = 0; i < results.length; i++) {\n                        var marker = new MarkerObject(\n                            results[i].geometry.location.lat(),\n                            results[i].geometry.location.lng(),\n                            results[i].icon,\n                            results[i].name,\n                            '',\n                            results[i].photos && results[i].photos.length > 0 ? results[i].photos[0].getUrl() : '',\n                            null\n                        );\n                        marker.marker = this.createMarker(marker);\n                        temp_markers.push(marker);\n                    }\n                    this.setState({ markers: temp_markers });\n                }\n                else {\n                    console.log('Error: ', status);\n                }\n            });\n        });\n    }\n\n    inputChanged = (event: any) => {\n        this.setState({ keyword: event.target.value }, () => {\n            \n        });\n    }\n\n    keyDown = (event: any) => {\n        if (event.key !== 'Enter') {\n            return;\n        }\n        var request = {\n            location: this.state.center,\n            radius: this.state.radius,\n            type: [],\n            name: ''\n        };\n        if (this.state.selected_type != 'all') {\n            request.type.push(this.state.selected_type as never);\n        }\n        if (this.state.keyword) {\n            request.name = this.state.keyword;\n        }\n\n        this.removeAllMarkers();\n        var temp_markers: MarkerObject[] = [];\n        this.placesService.nearbySearch(request, (results: any, status: any) => {\n            if (status === (window as any).google.maps.places.PlacesServiceStatus.OK) {\n                for (var i = 0; i < results.length; i++) {\n                    var marker = new MarkerObject(\n                        results[i].geometry.location.lat(),\n                        results[i].geometry.location.lng(),\n                        results[i].icon,\n                        results[i].name,\n                        '',\n                        results[i].photos && results[i].photos.length > 0 ? results[i].photos[0].getUrl() : '',\n                        null\n                    );\n                    marker.marker = this.createMarker(marker);\n                    temp_markers.push(marker);\n                }\n                this.setState({ markers: temp_markers });\n            }\n            else {\n                console.log('Error: ', status);\n            }\n        });\n    }\n\n    render() {\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-lg-3\" style={{ paddingLeft: '30px' }}>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <div style={{ textAlign: 'left' }}>\n                                <div className=\"form-group\">\n                                    <label>Places type</label>\n                                    <select value={this.state.selected_type} onChange={this.selectChanged} className=\"form-control\">\n                                        <option value=\"all\">All</option>\n                                        <option value=\"bank\">Bank</option>\n                                        <option value=\"bar\">Bar</option>\n                                        <option value=\"museum\">Museum</option>\n                                        <option value=\"restaurant\">Restaurant</option>\n                                    </select>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Search for</label>\n                                    <input type=\"text\" className=\"form-control\" id=\"search_for\" value={this.state.keyword} onChange={this.inputChanged} onKeyDown={this.keyDown} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <PlacesList Markers={this.state.markers} />\n                        </div>\n                    </div>\n\n                </div>\n                <div className=\"col-lg-9\">\n                    <div\n                        id=\"google-map\"\n                        ref={this.googleMapRef}\n                        style={{ width: '100%', height: '100vh' }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Map;","import React from 'react';\nimport Map from '../containers/Map';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div className=\"Home\">\n                <Map ShowMarker={false} />\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/layouts/Home';\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Home />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}